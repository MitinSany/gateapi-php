<?php
/**
 * Position
 *
 * PHP version 5
 *
 * @category Class
 * @package  GateApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gate API v4
 *
 * APIv4 futures provides all sorts of futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@mail.gate.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * Position Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Position implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Position';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contract' => 'string',
        'size' => 'int',
        'leverage' => 'string',
        'leverage_max' => 'string',
        'value' => 'string',
        'margin' => 'string',
        'entry_price' => 'string',
        'liq_price' => 'string',
        'unrealised_pnl' => 'string',
        'realised_pnl' => 'string',
        'history_pnl' => 'string',
        'locked' => 'bool',
        'risk_limit' => 'string',
        'adl_ranking' => 'int',
        'close_price' => 'string',
        'close_order_id' => 'string',
        'last_close_pnl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'contract' => null,
        'size' => 'int64',
        'leverage' => null,
        'leverage_max' => null,
        'value' => null,
        'margin' => null,
        'entry_price' => null,
        'liq_price' => null,
        'unrealised_pnl' => null,
        'realised_pnl' => null,
        'history_pnl' => null,
        'locked' => null,
        'risk_limit' => null,
        'adl_ranking' => null,
        'close_price' => null,
        'close_order_id' => null,
        'last_close_pnl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contract' => 'contract',
        'size' => 'size',
        'leverage' => 'leverage',
        'leverage_max' => 'leverage_max',
        'value' => 'value',
        'margin' => 'margin',
        'entry_price' => 'entry_price',
        'liq_price' => 'liq_price',
        'unrealised_pnl' => 'unrealised_pnl',
        'realised_pnl' => 'realised_pnl',
        'history_pnl' => 'history_pnl',
        'locked' => 'locked',
        'risk_limit' => 'risk_limit',
        'adl_ranking' => 'adl_ranking',
        'close_price' => 'close_price',
        'close_order_id' => 'close_order_id',
        'last_close_pnl' => 'last_close_pnl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contract' => 'setContract',
        'size' => 'setSize',
        'leverage' => 'setLeverage',
        'leverage_max' => 'setLeverageMax',
        'value' => 'setValue',
        'margin' => 'setMargin',
        'entry_price' => 'setEntryPrice',
        'liq_price' => 'setLiqPrice',
        'unrealised_pnl' => 'setUnrealisedPnl',
        'realised_pnl' => 'setRealisedPnl',
        'history_pnl' => 'setHistoryPnl',
        'locked' => 'setLocked',
        'risk_limit' => 'setRiskLimit',
        'adl_ranking' => 'setAdlRanking',
        'close_price' => 'setClosePrice',
        'close_order_id' => 'setCloseOrderId',
        'last_close_pnl' => 'setLastClosePnl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contract' => 'getContract',
        'size' => 'getSize',
        'leverage' => 'getLeverage',
        'leverage_max' => 'getLeverageMax',
        'value' => 'getValue',
        'margin' => 'getMargin',
        'entry_price' => 'getEntryPrice',
        'liq_price' => 'getLiqPrice',
        'unrealised_pnl' => 'getUnrealisedPnl',
        'realised_pnl' => 'getRealisedPnl',
        'history_pnl' => 'getHistoryPnl',
        'locked' => 'getLocked',
        'risk_limit' => 'getRiskLimit',
        'adl_ranking' => 'getAdlRanking',
        'close_price' => 'getClosePrice',
        'close_order_id' => 'getCloseOrderId',
        'last_close_pnl' => 'getLastClosePnl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['leverage'] = isset($data['leverage']) ? $data['leverage'] : null;
        $this->container['leverage_max'] = isset($data['leverage_max']) ? $data['leverage_max'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['entry_price'] = isset($data['entry_price']) ? $data['entry_price'] : null;
        $this->container['liq_price'] = isset($data['liq_price']) ? $data['liq_price'] : null;
        $this->container['unrealised_pnl'] = isset($data['unrealised_pnl']) ? $data['unrealised_pnl'] : null;
        $this->container['realised_pnl'] = isset($data['realised_pnl']) ? $data['realised_pnl'] : null;
        $this->container['history_pnl'] = isset($data['history_pnl']) ? $data['history_pnl'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['risk_limit'] = isset($data['risk_limit']) ? $data['risk_limit'] : null;
        $this->container['adl_ranking'] = isset($data['adl_ranking']) ? $data['adl_ranking'] : null;
        $this->container['close_price'] = isset($data['close_price']) ? $data['close_price'] : null;
        $this->container['close_order_id'] = isset($data['close_order_id']) ? $data['close_order_id'] : null;
        $this->container['last_close_pnl'] = isset($data['last_close_pnl']) ? $data['last_close_pnl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contract
     *
     * @return string|null
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param string|null $contract futures contract name
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size position size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return string|null
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param string|null $leverage position leverage
     *
     * @return $this
     */
    public function setLeverage($leverage)
    {
        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets leverage_max
     *
     * @return string|null
     */
    public function getLeverageMax()
    {
        return $this->container['leverage_max'];
    }

    /**
     * Sets leverage_max
     *
     * @param string|null $leverage_max maximum leverage of position
     *
     * @return $this
     */
    public function setLeverageMax($leverage_max)
    {
        $this->container['leverage_max'] = $leverage_max;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value position value calculated in settlement currency
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return string|null
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param string|null $margin position margin
     *
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets entry_price
     *
     * @return string|null
     */
    public function getEntryPrice()
    {
        return $this->container['entry_price'];
    }

    /**
     * Sets entry_price
     *
     * @param string|null $entry_price entry price
     *
     * @return $this
     */
    public function setEntryPrice($entry_price)
    {
        $this->container['entry_price'] = $entry_price;

        return $this;
    }

    /**
     * Gets liq_price
     *
     * @return string|null
     */
    public function getLiqPrice()
    {
        return $this->container['liq_price'];
    }

    /**
     * Sets liq_price
     *
     * @param string|null $liq_price liquidation price
     *
     * @return $this
     */
    public function setLiqPrice($liq_price)
    {
        $this->container['liq_price'] = $liq_price;

        return $this;
    }

    /**
     * Gets unrealised_pnl
     *
     * @return string|null
     */
    public function getUnrealisedPnl()
    {
        return $this->container['unrealised_pnl'];
    }

    /**
     * Sets unrealised_pnl
     *
     * @param string|null $unrealised_pnl unrealised pnl
     *
     * @return $this
     */
    public function setUnrealisedPnl($unrealised_pnl)
    {
        $this->container['unrealised_pnl'] = $unrealised_pnl;

        return $this;
    }

    /**
     * Gets realised_pnl
     *
     * @return string|null
     */
    public function getRealisedPnl()
    {
        return $this->container['realised_pnl'];
    }

    /**
     * Sets realised_pnl
     *
     * @param string|null $realised_pnl realised pnl
     *
     * @return $this
     */
    public function setRealisedPnl($realised_pnl)
    {
        $this->container['realised_pnl'] = $realised_pnl;

        return $this;
    }

    /**
     * Gets history_pnl
     *
     * @return string|null
     */
    public function getHistoryPnl()
    {
        return $this->container['history_pnl'];
    }

    /**
     * Sets history_pnl
     *
     * @param string|null $history_pnl history realised pnl
     *
     * @return $this
     */
    public function setHistoryPnl($history_pnl)
    {
        $this->container['history_pnl'] = $history_pnl;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool|null $locked is position locked. e.g. position will be locked if failed to liquidate
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets risk_limit
     *
     * @return string|null
     */
    public function getRiskLimit()
    {
        return $this->container['risk_limit'];
    }

    /**
     * Sets risk_limit
     *
     * @param string|null $risk_limit position risk limit
     *
     * @return $this
     */
    public function setRiskLimit($risk_limit)
    {
        $this->container['risk_limit'] = $risk_limit;

        return $this;
    }

    /**
     * Gets adl_ranking
     *
     * @return int|null
     */
    public function getAdlRanking()
    {
        return $this->container['adl_ranking'];
    }

    /**
     * Sets adl_ranking
     *
     * @param int|null $adl_ranking AutoDeleverage ranking, from 1 to 5. Ranking larger than 5 is not considered
     *
     * @return $this
     */
    public function setAdlRanking($adl_ranking)
    {
        $this->container['adl_ranking'] = $adl_ranking;

        return $this;
    }

    /**
     * Gets close_price
     *
     * @return string|null
     */
    public function getClosePrice()
    {
        return $this->container['close_price'];
    }

    /**
     * Sets close_price
     *
     * @param string|null $close_price close price of position in closing. 0 if position is not in closing
     *
     * @return $this
     */
    public function setClosePrice($close_price)
    {
        $this->container['close_price'] = $close_price;

        return $this;
    }

    /**
     * Gets close_order_id
     *
     * @return string|null
     */
    public function getCloseOrderId()
    {
        return $this->container['close_order_id'];
    }

    /**
     * Sets close_order_id
     *
     * @param string|null $close_order_id close order id if position in closing
     *
     * @return $this
     */
    public function setCloseOrderId($close_order_id)
    {
        $this->container['close_order_id'] = $close_order_id;

        return $this;
    }

    /**
     * Gets last_close_pnl
     *
     * @return string|null
     */
    public function getLastClosePnl()
    {
        return $this->container['last_close_pnl'];
    }

    /**
     * Sets last_close_pnl
     *
     * @param string|null $last_close_pnl last closed pnl
     *
     * @return $this
     */
    public function setLastClosePnl($last_close_pnl)
    {
        $this->container['last_close_pnl'] = $last_close_pnl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


