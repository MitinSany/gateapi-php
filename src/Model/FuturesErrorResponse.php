<?php
/**
 * FuturesErrorResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  GateApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gate API v4
 *
 * APIv4 futures provides all sorts of futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@mail.gate.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * FuturesErrorResponse Class Doc Comment
 *
 * @category Class
 * @description 非 2xx 状态码是的异常描述信息
 * @package  GateApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FuturesErrorResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FuturesErrorResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'label' => 'string',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'label' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LABEL_INVALID_PARAM_VALUE = 'INVALID_PARAM_VALUE';
    const LABEL_INVALID_REQUEST_BODY = 'INVALID_REQUEST_BODY';
    const LABEL_MISSING_REQUIRED_PARAM = 'MISSING_REQUIRED_PARAM';
    const LABEL_INVALID_CREDENTIALS = 'INVALID_CREDENTIALS';
    const LABEL_NO_FUTURES_ACCOUNT = 'NO_FUTURES_ACCOUNT';
    const LABEL_DUPLICATE_REQUEST = 'DUPLICATE_REQUEST';
    const LABEL_NO_MATCHING = 'NO_MATCHING';
    const LABEL_NO_MARKING_PRICE = 'NO_MARKING_PRICE';
    const LABEL_CONTRACT_NOT_FOUND = 'CONTRACT_NOT_FOUND';
    const LABEL_NOT_FOUND = 'NOT_FOUND';
    const LABEL_RISK_LIMIT_EXCEEDED = 'RISK_LIMIT_EXCEEDED';
    const LABEL_INSUFFICIENT_BALANCE = 'INSUFFICIENT_BALANCE';
    const LABEL_POTENTIAL_LIQUIDATION = 'POTENTIAL_LIQUIDATION';
    const LABEL_LEVERAGE_TOO_HIGH = 'LEVERAGE_TOO_HIGH';
    const LABEL_LEVERAGE_TOO_LOW = 'LEVERAGE_TOO_LOW';
    const LABEL_ORDER_NOT_FOUND = 'ORDER_NOT_FOUND';
    const LABEL_ORDER_FINISHED = 'ORDER_FINISHED';
    const LABEL_TOO_MANY_ORDERS = 'TOO_MANY_ORDERS';
    const LABEL_POSITION_NOT_FOUND = 'POSITION_NOT_FOUND';
    const LABEL_POSITION_CROSS_MARGIN = 'POSITION_CROSS_MARGIN';
    const LABEL_POSITION_LOCKED = 'POSITION_LOCKED';
    const LABEL_TOO_MUCH_CHANGE = 'TOO_MUCH_CHANGE';
    const LABEL_RISK_LIMIT_NOT_MULTIPLE = 'RISK_LIMIT_NOT_MULTIPLE';
    const LABEL_RISK_LIMIT_TOO_HIGH = 'RISK_LIMIT_TOO_HIGH';
    const LABEL_RISK_LIMIT_TOO_L_OW = 'RISK_LIMIT_TOO_lOW';
    const LABEL_PRICE_TOO_DEVIATED = 'PRICE_TOO_DEVIATED';
    const LABEL_SIZE_TOO_LARGE = 'SIZE_TOO_LARGE';
    const LABEL_SIZE_TOO_SMALL = 'SIZE_TOO_SMALL';
    const LABEL_LIQUIDATION_PRICE_EXCEEDED = 'LIQUIDATION_PRICE_EXCEEDED';
    const LABEL_POSITION_IN_CLOSE = 'POSITION_IN_CLOSE';
    const LABEL_SERVER_ERROR = 'SERVER_ERROR';
    const LABEL_TOO_BUSY = 'TOO_BUSY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelAllowableValues()
    {
        return [
            self::LABEL_INVALID_PARAM_VALUE,
            self::LABEL_INVALID_REQUEST_BODY,
            self::LABEL_MISSING_REQUIRED_PARAM,
            self::LABEL_INVALID_CREDENTIALS,
            self::LABEL_NO_FUTURES_ACCOUNT,
            self::LABEL_DUPLICATE_REQUEST,
            self::LABEL_NO_MATCHING,
            self::LABEL_NO_MARKING_PRICE,
            self::LABEL_CONTRACT_NOT_FOUND,
            self::LABEL_NOT_FOUND,
            self::LABEL_RISK_LIMIT_EXCEEDED,
            self::LABEL_INSUFFICIENT_BALANCE,
            self::LABEL_POTENTIAL_LIQUIDATION,
            self::LABEL_LEVERAGE_TOO_HIGH,
            self::LABEL_LEVERAGE_TOO_LOW,
            self::LABEL_ORDER_NOT_FOUND,
            self::LABEL_ORDER_FINISHED,
            self::LABEL_TOO_MANY_ORDERS,
            self::LABEL_POSITION_NOT_FOUND,
            self::LABEL_POSITION_CROSS_MARGIN,
            self::LABEL_POSITION_LOCKED,
            self::LABEL_TOO_MUCH_CHANGE,
            self::LABEL_RISK_LIMIT_NOT_MULTIPLE,
            self::LABEL_RISK_LIMIT_TOO_HIGH,
            self::LABEL_RISK_LIMIT_TOO_L_OW,
            self::LABEL_PRICE_TOO_DEVIATED,
            self::LABEL_SIZE_TOO_LARGE,
            self::LABEL_SIZE_TOO_SMALL,
            self::LABEL_LIQUIDATION_PRICE_EXCEEDED,
            self::LABEL_POSITION_IN_CLOSE,
            self::LABEL_SERVER_ERROR,
            self::LABEL_TOO_BUSY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLabelAllowableValues();
        if (!is_null($this->container['label']) && !in_array($this->container['label'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'label', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label 错误标识符，错误描述如下：  请求参数或格式问题:  - INVALID_PARAM_VALUE: 参数输入值无效 - INVALID_REQUEST_BODY: 无效请求体 - MISSING_REQUIRED_PARAM: 缺少必选参数 - DUPLICATE_REQUEST: 请求过于频繁  认证相关:  - INVALID_CREDENTIALS: 认证接口缺少用户认证信息 - NO_FUTURES_ACCOUNT: 用户无期货账户  业务相关:  - NO_MATCHING: 没有匹配的对手单 - NO_MARKING_PRICE: 合约当前无标记价格 - CONTRACT_NOT_FOUND: 合约未找到 - NOT_FOUND: 请求路径不存在 - RISK_LIMIT_EXCEEDED: 委托超出风险限额 - INSUFFICIENT_BALANCE: 余额不足 - POTENTIAL_LIQUIDATION: 操作可能导致爆仓 - LEVERAGE_TOO_HIGH: 杠杆倍数设置过高 - LEVERAGE_TOO_LOW: 杠杆倍数设置过低 - ORDER_NOT_FOUND: 委托不存在 - ORDER_FINISHED: 订单已结束 - TOO_MANY_ORDERS: 过多未交易的挂单 - POSITION_NOT_FOUND: 合约无头寸信息 - POSITION_CROSS_MARGIN: 全仓不支持更新保证金 - POSITION_LOCKED: 头寸当前被锁定 - TOO_MUCH_CHANGE: 保证金超过可调范围 - RISK_LIMIT_NOT_MULTIPLE: 风险限额未按照步长调整 - RISK_LIMIT_TOO_HIGH: 超出最大风险限额 - RISK_LIMIT_TOO_lOW: 风险限额设置过低 - PRICE_TOO_DEVIATED: 下单价与标记价格相差过大 - SIZE_TOO_LARGE: 下单数量超过上限 - SIZE_TOO_SMALL: 下单数量不足下限 - LIQUIDATION_PRICE_EXCEEDED: 补仓时价格不能超过平仓价 - POSITION_IN_CLOSE: 仓位正在平仓 - POTENTIAL_BANKRUPTCY: 下单若成交，保证金无法弥补损失  服务异常： - SERVER_ERROR: 内部错误 - TOO_BUSY: 服务当前忙
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $allowedValues = $this->getLabelAllowableValues();
        if (!is_null($label) && !in_array($label, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'label', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message 详细错误描述。如果指定了 `Accept-Language` 请求头部，且支持指定语言，则描述信息会返回对应的语言
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


