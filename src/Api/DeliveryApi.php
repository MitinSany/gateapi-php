<?php
/**
 * DeliveryApi
 * PHP version 5
 *
 * @category Class
 * @package  GateApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gate API v4
 *
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GateApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GateApi\ApiException;
use GateApi\Configuration;
use GateApi\HeaderSelector;
use GateApi\ObjectSerializer;

/**
 * DeliveryApi Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeliveryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    protected function buildSignHeaders($method, $resourcePath, $query_string = null, $payload = null) {
        $fmt = "%s\n%s\n%s\n%s\n%s";
        $timestamp = time();
        $hashed_payload = hash("sha512", ($payload != null) ? $payload : "");
        $signature_string = sprintf($fmt, $method, "/api/v4" . $resourcePath,
                                    ($query_string != null) ? urldecode($query_string) : "",
                                    $hashed_payload, $timestamp);
        $signature = hash_hmac("sha512", $signature_string, $this->config->getSecret());
        return [
            "KEY" => $this->config->getKey(),
            "SIGN" => $signature,
            "Timestamp" => $timestamp
        ];
    }

    /**
     * Operation cancelDeliveryOrder
     *
     * Cancel a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesOrder
     */
    public function cancelDeliveryOrder($settle, $order_id)
    {
        list($response) = $this->cancelDeliveryOrderWithHttpInfo($settle, $order_id);
        return $response;
    }

    /**
     * Operation cancelDeliveryOrderWithHttpInfo
     *
     * Cancel a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelDeliveryOrderWithHttpInfo($settle, $order_id)
    {
        $request = $this->cancelDeliveryOrderRequest($settle, $order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesOrder' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesOrder';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelDeliveryOrderAsync
     *
     * Cancel a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelDeliveryOrderAsync($settle, $order_id)
    {
        return $this->cancelDeliveryOrderAsyncWithHttpInfo($settle, $order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelDeliveryOrderAsyncWithHttpInfo
     *
     * Cancel a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelDeliveryOrderAsyncWithHttpInfo($settle, $order_id)
    {
        $returnType = '\GateApi\Model\FuturesOrder';
        $request = $this->cancelDeliveryOrderRequest($settle, $order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelDeliveryOrder'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelDeliveryOrderRequest($settle, $order_id)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling cancelDeliveryOrder'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling cancelDeliveryOrder'
            );
        }

        $resourcePath = '/delivery/{settle}/orders/{order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('DELETE', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelDeliveryOrders
     *
     * Cancel all `open` orders matched
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $side All bids or asks. Both included in not specified (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesOrder[]
     */
    public function cancelDeliveryOrders($settle, $contract, $side = null)
    {
        list($response) = $this->cancelDeliveryOrdersWithHttpInfo($settle, $contract, $side);
        return $response;
    }

    /**
     * Operation cancelDeliveryOrdersWithHttpInfo
     *
     * Cancel all `open` orders matched
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $side All bids or asks. Both included in not specified (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelDeliveryOrdersWithHttpInfo($settle, $contract, $side = null)
    {
        $request = $this->cancelDeliveryOrdersRequest($settle, $contract, $side);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesOrder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesOrder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesOrder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesOrder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelDeliveryOrdersAsync
     *
     * Cancel all `open` orders matched
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $side All bids or asks. Both included in not specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelDeliveryOrdersAsync($settle, $contract, $side = null)
    {
        return $this->cancelDeliveryOrdersAsyncWithHttpInfo($settle, $contract, $side)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelDeliveryOrdersAsyncWithHttpInfo
     *
     * Cancel all `open` orders matched
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $side All bids or asks. Both included in not specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelDeliveryOrdersAsyncWithHttpInfo($settle, $contract, $side = null)
    {
        $returnType = '\GateApi\Model\FuturesOrder[]';
        $request = $this->cancelDeliveryOrdersRequest($settle, $contract, $side);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelDeliveryOrders'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $side All bids or asks. Both included in not specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelDeliveryOrdersRequest($settle, $contract, $side = null)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling cancelDeliveryOrders'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling cancelDeliveryOrders'
            );
        }

        $resourcePath = '/delivery/{settle}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($side !== null) {
            $queryParams['side'] = ObjectSerializer::toQueryValue($side);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('DELETE', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPriceTriggeredDeliveryOrder
     *
     * Cancel a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesPriceTriggeredOrder
     */
    public function cancelPriceTriggeredDeliveryOrder($settle, $order_id)
    {
        list($response) = $this->cancelPriceTriggeredDeliveryOrderWithHttpInfo($settle, $order_id);
        return $response;
    }

    /**
     * Operation cancelPriceTriggeredDeliveryOrderWithHttpInfo
     *
     * Cancel a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesPriceTriggeredOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPriceTriggeredDeliveryOrderWithHttpInfo($settle, $order_id)
    {
        $request = $this->cancelPriceTriggeredDeliveryOrderRequest($settle, $order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesPriceTriggeredOrder' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesPriceTriggeredOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesPriceTriggeredOrder';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesPriceTriggeredOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPriceTriggeredDeliveryOrderAsync
     *
     * Cancel a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPriceTriggeredDeliveryOrderAsync($settle, $order_id)
    {
        return $this->cancelPriceTriggeredDeliveryOrderAsyncWithHttpInfo($settle, $order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPriceTriggeredDeliveryOrderAsyncWithHttpInfo
     *
     * Cancel a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPriceTriggeredDeliveryOrderAsyncWithHttpInfo($settle, $order_id)
    {
        $returnType = '\GateApi\Model\FuturesPriceTriggeredOrder';
        $request = $this->cancelPriceTriggeredDeliveryOrderRequest($settle, $order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPriceTriggeredDeliveryOrder'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelPriceTriggeredDeliveryOrderRequest($settle, $order_id)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling cancelPriceTriggeredDeliveryOrder'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling cancelPriceTriggeredDeliveryOrder'
            );
        }

        $resourcePath = '/delivery/{settle}/price_orders/{order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('DELETE', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPriceTriggeredDeliveryOrderList
     *
     * Cancel all open orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesPriceTriggeredOrder[]
     */
    public function cancelPriceTriggeredDeliveryOrderList($settle, $contract)
    {
        list($response) = $this->cancelPriceTriggeredDeliveryOrderListWithHttpInfo($settle, $contract);
        return $response;
    }

    /**
     * Operation cancelPriceTriggeredDeliveryOrderListWithHttpInfo
     *
     * Cancel all open orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesPriceTriggeredOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPriceTriggeredDeliveryOrderListWithHttpInfo($settle, $contract)
    {
        $request = $this->cancelPriceTriggeredDeliveryOrderListRequest($settle, $contract);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesPriceTriggeredOrder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesPriceTriggeredOrder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesPriceTriggeredOrder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesPriceTriggeredOrder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPriceTriggeredDeliveryOrderListAsync
     *
     * Cancel all open orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPriceTriggeredDeliveryOrderListAsync($settle, $contract)
    {
        return $this->cancelPriceTriggeredDeliveryOrderListAsyncWithHttpInfo($settle, $contract)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPriceTriggeredDeliveryOrderListAsyncWithHttpInfo
     *
     * Cancel all open orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPriceTriggeredDeliveryOrderListAsyncWithHttpInfo($settle, $contract)
    {
        $returnType = '\GateApi\Model\FuturesPriceTriggeredOrder[]';
        $request = $this->cancelPriceTriggeredDeliveryOrderListRequest($settle, $contract);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPriceTriggeredDeliveryOrderList'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelPriceTriggeredDeliveryOrderListRequest($settle, $contract)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling cancelPriceTriggeredDeliveryOrderList'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling cancelPriceTriggeredDeliveryOrderList'
            );
        }

        $resourcePath = '/delivery/{settle}/price_orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('DELETE', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeliveryOrder
     *
     * Create a futures order
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesOrder $futures_order futures_order (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesOrder
     */
    public function createDeliveryOrder($settle, $futures_order)
    {
        list($response) = $this->createDeliveryOrderWithHttpInfo($settle, $futures_order);
        return $response;
    }

    /**
     * Operation createDeliveryOrderWithHttpInfo
     *
     * Create a futures order
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesOrder $futures_order (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeliveryOrderWithHttpInfo($settle, $futures_order)
    {
        $request = $this->createDeliveryOrderRequest($settle, $futures_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\GateApi\Model\FuturesOrder' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesOrder';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeliveryOrderAsync
     *
     * Create a futures order
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesOrder $futures_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeliveryOrderAsync($settle, $futures_order)
    {
        return $this->createDeliveryOrderAsyncWithHttpInfo($settle, $futures_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeliveryOrderAsyncWithHttpInfo
     *
     * Create a futures order
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesOrder $futures_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeliveryOrderAsyncWithHttpInfo($settle, $futures_order)
    {
        $returnType = '\GateApi\Model\FuturesOrder';
        $request = $this->createDeliveryOrderRequest($settle, $futures_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeliveryOrder'
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesOrder $futures_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDeliveryOrderRequest($settle, $futures_order)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling createDeliveryOrder'
            );
        }
        // verify the required parameter 'futures_order' is set
        if ($futures_order === null || (is_array($futures_order) && count($futures_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $futures_order when calling createDeliveryOrder'
            );
        }

        $resourcePath = '/delivery/{settle}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($futures_order)) {
            $_tempBody = $futures_order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('POST', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPriceTriggeredDeliveryOrder
     *
     * Create a price-triggered order
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesPriceTriggeredOrder $futures_price_triggered_order futures_price_triggered_order (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\TriggerOrderResponse
     */
    public function createPriceTriggeredDeliveryOrder($settle, $futures_price_triggered_order)
    {
        list($response) = $this->createPriceTriggeredDeliveryOrderWithHttpInfo($settle, $futures_price_triggered_order);
        return $response;
    }

    /**
     * Operation createPriceTriggeredDeliveryOrderWithHttpInfo
     *
     * Create a price-triggered order
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesPriceTriggeredOrder $futures_price_triggered_order (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\TriggerOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPriceTriggeredDeliveryOrderWithHttpInfo($settle, $futures_price_triggered_order)
    {
        $request = $this->createPriceTriggeredDeliveryOrderRequest($settle, $futures_price_triggered_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\GateApi\Model\TriggerOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\TriggerOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\TriggerOrderResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\TriggerOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPriceTriggeredDeliveryOrderAsync
     *
     * Create a price-triggered order
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesPriceTriggeredOrder $futures_price_triggered_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPriceTriggeredDeliveryOrderAsync($settle, $futures_price_triggered_order)
    {
        return $this->createPriceTriggeredDeliveryOrderAsyncWithHttpInfo($settle, $futures_price_triggered_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPriceTriggeredDeliveryOrderAsyncWithHttpInfo
     *
     * Create a price-triggered order
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesPriceTriggeredOrder $futures_price_triggered_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPriceTriggeredDeliveryOrderAsyncWithHttpInfo($settle, $futures_price_triggered_order)
    {
        $returnType = '\GateApi\Model\TriggerOrderResponse';
        $request = $this->createPriceTriggeredDeliveryOrderRequest($settle, $futures_price_triggered_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPriceTriggeredDeliveryOrder'
     *
     * @param  string $settle Settle currency (required)
     * @param  \GateApi\Model\FuturesPriceTriggeredOrder $futures_price_triggered_order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPriceTriggeredDeliveryOrderRequest($settle, $futures_price_triggered_order)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling createPriceTriggeredDeliveryOrder'
            );
        }
        // verify the required parameter 'futures_price_triggered_order' is set
        if ($futures_price_triggered_order === null || (is_array($futures_price_triggered_order) && count($futures_price_triggered_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $futures_price_triggered_order when calling createPriceTriggeredDeliveryOrder'
            );
        }

        $resourcePath = '/delivery/{settle}/price_orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($futures_price_triggered_order)) {
            $_tempBody = $futures_price_triggered_order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('POST', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeliveryContract
     *
     * Get a single contract
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\DeliveryContract
     */
    public function getDeliveryContract($settle, $contract)
    {
        list($response) = $this->getDeliveryContractWithHttpInfo($settle, $contract);
        return $response;
    }

    /**
     * Operation getDeliveryContractWithHttpInfo
     *
     * Get a single contract
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\DeliveryContract, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeliveryContractWithHttpInfo($settle, $contract)
    {
        $request = $this->getDeliveryContractRequest($settle, $contract);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\DeliveryContract' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\DeliveryContract', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\DeliveryContract';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\DeliveryContract',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeliveryContractAsync
     *
     * Get a single contract
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryContractAsync($settle, $contract)
    {
        return $this->getDeliveryContractAsyncWithHttpInfo($settle, $contract)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeliveryContractAsyncWithHttpInfo
     *
     * Get a single contract
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryContractAsyncWithHttpInfo($settle, $contract)
    {
        $returnType = '\GateApi\Model\DeliveryContract';
        $request = $this->getDeliveryContractRequest($settle, $contract);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeliveryContract'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeliveryContractRequest($settle, $contract)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling getDeliveryContract'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling getDeliveryContract'
            );
        }

        $resourcePath = '/delivery/{settle}/contracts/{contract}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($contract !== null) {
            $resourcePath = str_replace(
                '{' . 'contract' . '}',
                ObjectSerializer::toPathValue($contract),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeliveryOrder
     *
     * Get a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesOrder
     */
    public function getDeliveryOrder($settle, $order_id)
    {
        list($response) = $this->getDeliveryOrderWithHttpInfo($settle, $order_id);
        return $response;
    }

    /**
     * Operation getDeliveryOrderWithHttpInfo
     *
     * Get a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeliveryOrderWithHttpInfo($settle, $order_id)
    {
        $request = $this->getDeliveryOrderRequest($settle, $order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesOrder' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesOrder';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeliveryOrderAsync
     *
     * Get a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryOrderAsync($settle, $order_id)
    {
        return $this->getDeliveryOrderAsyncWithHttpInfo($settle, $order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeliveryOrderAsyncWithHttpInfo
     *
     * Get a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryOrderAsyncWithHttpInfo($settle, $order_id)
    {
        $returnType = '\GateApi\Model\FuturesOrder';
        $request = $this->getDeliveryOrderRequest($settle, $order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeliveryOrder'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeliveryOrderRequest($settle, $order_id)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling getDeliveryOrder'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getDeliveryOrder'
            );
        }

        $resourcePath = '/delivery/{settle}/orders/{order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeliveryPosition
     *
     * Get single position
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\Position
     */
    public function getDeliveryPosition($settle, $contract)
    {
        list($response) = $this->getDeliveryPositionWithHttpInfo($settle, $contract);
        return $response;
    }

    /**
     * Operation getDeliveryPositionWithHttpInfo
     *
     * Get single position
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\Position, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeliveryPositionWithHttpInfo($settle, $contract)
    {
        $request = $this->getDeliveryPositionRequest($settle, $contract);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\Position' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\Position', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\Position';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\Position',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeliveryPositionAsync
     *
     * Get single position
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryPositionAsync($settle, $contract)
    {
        return $this->getDeliveryPositionAsyncWithHttpInfo($settle, $contract)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeliveryPositionAsyncWithHttpInfo
     *
     * Get single position
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryPositionAsyncWithHttpInfo($settle, $contract)
    {
        $returnType = '\GateApi\Model\Position';
        $request = $this->getDeliveryPositionRequest($settle, $contract);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeliveryPosition'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeliveryPositionRequest($settle, $contract)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling getDeliveryPosition'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling getDeliveryPosition'
            );
        }

        $resourcePath = '/delivery/{settle}/positions/{contract}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($contract !== null) {
            $resourcePath = str_replace(
                '{' . 'contract' . '}',
                ObjectSerializer::toPathValue($contract),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyDeliveryTrades
     *
     * List personal trading history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $order Futures order ID, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\MyFuturesTrade[]
     */
    public function getMyDeliveryTrades($settle, $contract = null, $order = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        list($response) = $this->getMyDeliveryTradesWithHttpInfo($settle, $contract, $order, $limit, $offset, $last_id, $count_total);
        return $response;
    }

    /**
     * Operation getMyDeliveryTradesWithHttpInfo
     *
     * List personal trading history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $order Futures order ID, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\MyFuturesTrade[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyDeliveryTradesWithHttpInfo($settle, $contract = null, $order = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        $request = $this->getMyDeliveryTradesRequest($settle, $contract, $order, $limit, $offset, $last_id, $count_total);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\MyFuturesTrade[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\MyFuturesTrade[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\MyFuturesTrade[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\MyFuturesTrade[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyDeliveryTradesAsync
     *
     * List personal trading history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $order Futures order ID, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyDeliveryTradesAsync($settle, $contract = null, $order = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        return $this->getMyDeliveryTradesAsyncWithHttpInfo($settle, $contract, $order, $limit, $offset, $last_id, $count_total)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyDeliveryTradesAsyncWithHttpInfo
     *
     * List personal trading history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $order Futures order ID, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMyDeliveryTradesAsyncWithHttpInfo($settle, $contract = null, $order = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        $returnType = '\GateApi\Model\MyFuturesTrade[]';
        $request = $this->getMyDeliveryTradesRequest($settle, $contract, $order, $limit, $offset, $last_id, $count_total);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyDeliveryTrades'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $order Futures order ID, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMyDeliveryTradesRequest($settle, $contract = null, $order = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling getMyDeliveryTrades'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.getMyDeliveryTrades, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.getMyDeliveryTrades, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DeliveryApi.getMyDeliveryTrades, must be bigger than or equal to 0.');
        }


        $resourcePath = '/delivery/{settle}/my_trades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($last_id !== null) {
            $queryParams['last_id'] = ObjectSerializer::toQueryValue($last_id);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = ObjectSerializer::toQueryValue($count_total);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPriceTriggeredDeliveryOrder
     *
     * Get a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesPriceTriggeredOrder
     */
    public function getPriceTriggeredDeliveryOrder($settle, $order_id)
    {
        list($response) = $this->getPriceTriggeredDeliveryOrderWithHttpInfo($settle, $order_id);
        return $response;
    }

    /**
     * Operation getPriceTriggeredDeliveryOrderWithHttpInfo
     *
     * Get a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesPriceTriggeredOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPriceTriggeredDeliveryOrderWithHttpInfo($settle, $order_id)
    {
        $request = $this->getPriceTriggeredDeliveryOrderRequest($settle, $order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesPriceTriggeredOrder' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesPriceTriggeredOrder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesPriceTriggeredOrder';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesPriceTriggeredOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPriceTriggeredDeliveryOrderAsync
     *
     * Get a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPriceTriggeredDeliveryOrderAsync($settle, $order_id)
    {
        return $this->getPriceTriggeredDeliveryOrderAsyncWithHttpInfo($settle, $order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPriceTriggeredDeliveryOrderAsyncWithHttpInfo
     *
     * Get a single order
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPriceTriggeredDeliveryOrderAsyncWithHttpInfo($settle, $order_id)
    {
        $returnType = '\GateApi\Model\FuturesPriceTriggeredOrder';
        $request = $this->getPriceTriggeredDeliveryOrderRequest($settle, $order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPriceTriggeredDeliveryOrder'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $order_id ID returned on order successfully being created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPriceTriggeredDeliveryOrderRequest($settle, $order_id)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling getPriceTriggeredDeliveryOrder'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getPriceTriggeredDeliveryOrder'
            );
        }

        $resourcePath = '/delivery/{settle}/price_orders/{order_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryAccountBook
     *
     * Query account book
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $from Start timestamp (optional)
     * @param  int $to End timestamp (optional)
     * @param  string $type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesAccountBook[]
     */
    public function listDeliveryAccountBook($settle, $limit = 100, $from = null, $to = null, $type = null)
    {
        list($response) = $this->listDeliveryAccountBookWithHttpInfo($settle, $limit, $from, $to, $type);
        return $response;
    }

    /**
     * Operation listDeliveryAccountBookWithHttpInfo
     *
     * Query account book
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $from Start timestamp (optional)
     * @param  int $to End timestamp (optional)
     * @param  string $type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesAccountBook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryAccountBookWithHttpInfo($settle, $limit = 100, $from = null, $to = null, $type = null)
    {
        $request = $this->listDeliveryAccountBookRequest($settle, $limit, $from, $to, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesAccountBook[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesAccountBook[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesAccountBook[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesAccountBook[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryAccountBookAsync
     *
     * Query account book
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $from Start timestamp (optional)
     * @param  int $to End timestamp (optional)
     * @param  string $type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryAccountBookAsync($settle, $limit = 100, $from = null, $to = null, $type = null)
    {
        return $this->listDeliveryAccountBookAsyncWithHttpInfo($settle, $limit, $from, $to, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryAccountBookAsyncWithHttpInfo
     *
     * Query account book
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $from Start timestamp (optional)
     * @param  int $to End timestamp (optional)
     * @param  string $type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryAccountBookAsyncWithHttpInfo($settle, $limit = 100, $from = null, $to = null, $type = null)
    {
        $returnType = '\GateApi\Model\FuturesAccountBook[]';
        $request = $this->listDeliveryAccountBookRequest($settle, $limit, $from, $to, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryAccountBook'
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $from Start timestamp (optional)
     * @param  int $to End timestamp (optional)
     * @param  string $type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryAccountBookRequest($settle, $limit = 100, $from = null, $to = null, $type = null)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryAccountBook'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryAccountBook, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryAccountBook, must be bigger than or equal to 1.');
        }


        $resourcePath = '/delivery/{settle}/account_book';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryAccounts
     *
     * Query futures account
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesAccount
     */
    public function listDeliveryAccounts($settle)
    {
        list($response) = $this->listDeliveryAccountsWithHttpInfo($settle);
        return $response;
    }

    /**
     * Operation listDeliveryAccountsWithHttpInfo
     *
     * Query futures account
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryAccountsWithHttpInfo($settle)
    {
        $request = $this->listDeliveryAccountsRequest($settle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesAccount' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesAccount';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryAccountsAsync
     *
     * Query futures account
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryAccountsAsync($settle)
    {
        return $this->listDeliveryAccountsAsyncWithHttpInfo($settle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryAccountsAsyncWithHttpInfo
     *
     * Query futures account
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryAccountsAsyncWithHttpInfo($settle)
    {
        $returnType = '\GateApi\Model\FuturesAccount';
        $request = $this->listDeliveryAccountsRequest($settle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryAccounts'
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryAccountsRequest($settle)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryAccounts'
            );
        }

        $resourcePath = '/delivery/{settle}/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryCandlesticks
     *
     * Get futures candlesticks
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  float $from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param  float $to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param  int $limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param  string $interval Interval time between data points (optional, default to '5m')
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesCandlestick[]
     */
    public function listDeliveryCandlesticks($settle, $contract, $from = null, $to = null, $limit = 100, $interval = '5m')
    {
        list($response) = $this->listDeliveryCandlesticksWithHttpInfo($settle, $contract, $from, $to, $limit, $interval);
        return $response;
    }

    /**
     * Operation listDeliveryCandlesticksWithHttpInfo
     *
     * Get futures candlesticks
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  float $from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param  float $to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param  int $limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param  string $interval Interval time between data points (optional, default to '5m')
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesCandlestick[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryCandlesticksWithHttpInfo($settle, $contract, $from = null, $to = null, $limit = 100, $interval = '5m')
    {
        $request = $this->listDeliveryCandlesticksRequest($settle, $contract, $from, $to, $limit, $interval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesCandlestick[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesCandlestick[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesCandlestick[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesCandlestick[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryCandlesticksAsync
     *
     * Get futures candlesticks
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  float $from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param  float $to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param  int $limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param  string $interval Interval time between data points (optional, default to '5m')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryCandlesticksAsync($settle, $contract, $from = null, $to = null, $limit = 100, $interval = '5m')
    {
        return $this->listDeliveryCandlesticksAsyncWithHttpInfo($settle, $contract, $from, $to, $limit, $interval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryCandlesticksAsyncWithHttpInfo
     *
     * Get futures candlesticks
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  float $from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param  float $to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param  int $limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param  string $interval Interval time between data points (optional, default to '5m')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryCandlesticksAsyncWithHttpInfo($settle, $contract, $from = null, $to = null, $limit = 100, $interval = '5m')
    {
        $returnType = '\GateApi\Model\FuturesCandlestick[]';
        $request = $this->listDeliveryCandlesticksRequest($settle, $contract, $from, $to, $limit, $interval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryCandlesticks'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  float $from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param  float $to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param  int $limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param  string $interval Interval time between data points (optional, default to '5m')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryCandlesticksRequest($settle, $contract, $from = null, $to = null, $limit = 100, $interval = '5m')
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryCandlesticks'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling listDeliveryCandlesticks'
            );
        }
        if ($limit !== null && $limit > 2000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryCandlesticks, must be smaller than or equal to 2000.');
        }


        $resourcePath = '/delivery/{settle}/candlesticks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryContracts
     *
     * List all futures contracts
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\DeliveryContract[]
     */
    public function listDeliveryContracts($settle)
    {
        list($response) = $this->listDeliveryContractsWithHttpInfo($settle);
        return $response;
    }

    /**
     * Operation listDeliveryContractsWithHttpInfo
     *
     * List all futures contracts
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\DeliveryContract[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryContractsWithHttpInfo($settle)
    {
        $request = $this->listDeliveryContractsRequest($settle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\DeliveryContract[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\DeliveryContract[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\DeliveryContract[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\DeliveryContract[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryContractsAsync
     *
     * List all futures contracts
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryContractsAsync($settle)
    {
        return $this->listDeliveryContractsAsyncWithHttpInfo($settle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryContractsAsyncWithHttpInfo
     *
     * List all futures contracts
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryContractsAsyncWithHttpInfo($settle)
    {
        $returnType = '\GateApi\Model\DeliveryContract[]';
        $request = $this->listDeliveryContractsRequest($settle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryContracts'
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryContractsRequest($settle)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryContracts'
            );
        }

        $resourcePath = '/delivery/{settle}/contracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryInsuranceLedger
     *
     * Futures insurance balance history
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\InsuranceRecord[]
     */
    public function listDeliveryInsuranceLedger($settle, $limit = 100)
    {
        list($response) = $this->listDeliveryInsuranceLedgerWithHttpInfo($settle, $limit);
        return $response;
    }

    /**
     * Operation listDeliveryInsuranceLedgerWithHttpInfo
     *
     * Futures insurance balance history
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\InsuranceRecord[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryInsuranceLedgerWithHttpInfo($settle, $limit = 100)
    {
        $request = $this->listDeliveryInsuranceLedgerRequest($settle, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\InsuranceRecord[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\InsuranceRecord[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\InsuranceRecord[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\InsuranceRecord[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryInsuranceLedgerAsync
     *
     * Futures insurance balance history
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryInsuranceLedgerAsync($settle, $limit = 100)
    {
        return $this->listDeliveryInsuranceLedgerAsyncWithHttpInfo($settle, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryInsuranceLedgerAsyncWithHttpInfo
     *
     * Futures insurance balance history
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryInsuranceLedgerAsyncWithHttpInfo($settle, $limit = 100)
    {
        $returnType = '\GateApi\Model\InsuranceRecord[]';
        $request = $this->listDeliveryInsuranceLedgerRequest($settle, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryInsuranceLedger'
     *
     * @param  string $settle Settle currency (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryInsuranceLedgerRequest($settle, $limit = 100)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryInsuranceLedger'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryInsuranceLedger, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryInsuranceLedger, must be bigger than or equal to 1.');
        }


        $resourcePath = '/delivery/{settle}/insurance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryLiquidates
     *
     * List liquidation history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a liquidation timestamp (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesLiquidate[]
     */
    public function listDeliveryLiquidates($settle, $contract = null, $limit = 100, $at = 0)
    {
        list($response) = $this->listDeliveryLiquidatesWithHttpInfo($settle, $contract, $limit, $at);
        return $response;
    }

    /**
     * Operation listDeliveryLiquidatesWithHttpInfo
     *
     * List liquidation history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a liquidation timestamp (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesLiquidate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryLiquidatesWithHttpInfo($settle, $contract = null, $limit = 100, $at = 0)
    {
        $request = $this->listDeliveryLiquidatesRequest($settle, $contract, $limit, $at);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesLiquidate[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesLiquidate[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesLiquidate[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesLiquidate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryLiquidatesAsync
     *
     * List liquidation history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a liquidation timestamp (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryLiquidatesAsync($settle, $contract = null, $limit = 100, $at = 0)
    {
        return $this->listDeliveryLiquidatesAsyncWithHttpInfo($settle, $contract, $limit, $at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryLiquidatesAsyncWithHttpInfo
     *
     * List liquidation history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a liquidation timestamp (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryLiquidatesAsyncWithHttpInfo($settle, $contract = null, $limit = 100, $at = 0)
    {
        $returnType = '\GateApi\Model\FuturesLiquidate[]';
        $request = $this->listDeliveryLiquidatesRequest($settle, $contract, $limit, $at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryLiquidates'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a liquidation timestamp (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryLiquidatesRequest($settle, $contract = null, $limit = 100, $at = 0)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryLiquidates'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryLiquidates, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryLiquidates, must be bigger than or equal to 1.');
        }


        $resourcePath = '/delivery/{settle}/liquidates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($at !== null) {
            $queryParams['at'] = ObjectSerializer::toQueryValue($at);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryOrderBook
     *
     * Futures order book
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to '0')
     * @param  int $limit Maximum number of order depth data in asks or bids (optional, default to 10)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesOrderBook
     */
    public function listDeliveryOrderBook($settle, $contract, $interval = '0', $limit = 10)
    {
        list($response) = $this->listDeliveryOrderBookWithHttpInfo($settle, $contract, $interval, $limit);
        return $response;
    }

    /**
     * Operation listDeliveryOrderBookWithHttpInfo
     *
     * Futures order book
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to '0')
     * @param  int $limit Maximum number of order depth data in asks or bids (optional, default to 10)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesOrderBook, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryOrderBookWithHttpInfo($settle, $contract, $interval = '0', $limit = 10)
    {
        $request = $this->listDeliveryOrderBookRequest($settle, $contract, $interval, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesOrderBook' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesOrderBook', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesOrderBook';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesOrderBook',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryOrderBookAsync
     *
     * Futures order book
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to '0')
     * @param  int $limit Maximum number of order depth data in asks or bids (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryOrderBookAsync($settle, $contract, $interval = '0', $limit = 10)
    {
        return $this->listDeliveryOrderBookAsyncWithHttpInfo($settle, $contract, $interval, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryOrderBookAsyncWithHttpInfo
     *
     * Futures order book
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to '0')
     * @param  int $limit Maximum number of order depth data in asks or bids (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryOrderBookAsyncWithHttpInfo($settle, $contract, $interval = '0', $limit = 10)
    {
        $returnType = '\GateApi\Model\FuturesOrderBook';
        $request = $this->listDeliveryOrderBookRequest($settle, $contract, $interval, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryOrderBook'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to '0')
     * @param  int $limit Maximum number of order depth data in asks or bids (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryOrderBookRequest($settle, $contract, $interval = '0', $limit = 10)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryOrderBook'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling listDeliveryOrderBook'
            );
        }
        if ($limit !== null && $limit > 20) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryOrderBook, must be smaller than or equal to 20.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryOrderBook, must be bigger than or equal to 1.');
        }


        $resourcePath = '/delivery/{settle}/order_book';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryOrders
     *
     * List futures orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesOrder[]
     */
    public function listDeliveryOrders($settle, $status, $contract = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        list($response) = $this->listDeliveryOrdersWithHttpInfo($settle, $status, $contract, $limit, $offset, $last_id, $count_total);
        return $response;
    }

    /**
     * Operation listDeliveryOrdersWithHttpInfo
     *
     * List futures orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryOrdersWithHttpInfo($settle, $status, $contract = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        $request = $this->listDeliveryOrdersRequest($settle, $status, $contract, $limit, $offset, $last_id, $count_total);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesOrder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesOrder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesOrder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesOrder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryOrdersAsync
     *
     * List futures orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryOrdersAsync($settle, $status, $contract = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        return $this->listDeliveryOrdersAsyncWithHttpInfo($settle, $status, $contract, $limit, $offset, $last_id, $count_total)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryOrdersAsyncWithHttpInfo
     *
     * List futures orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryOrdersAsyncWithHttpInfo($settle, $status, $contract = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        $returnType = '\GateApi\Model\FuturesOrder[]';
        $request = $this->listDeliveryOrdersRequest($settle, $status, $contract, $limit, $offset, $last_id, $count_total);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryOrders'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     * @param  string $last_id Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param  int $count_total Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryOrdersRequest($settle, $status, $contract = null, $limit = 100, $offset = 0, $last_id = null, $count_total = 0)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryOrders'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling listDeliveryOrders'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryOrders, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryOrders, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DeliveryApi.listDeliveryOrders, must be bigger than or equal to 0.');
        }


        $resourcePath = '/delivery/{settle}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($last_id !== null) {
            $queryParams['last_id'] = ObjectSerializer::toQueryValue($last_id);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = ObjectSerializer::toQueryValue($count_total);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryPositionClose
     *
     * List position close history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\PositionClose[]
     */
    public function listDeliveryPositionClose($settle, $contract = null, $limit = 100)
    {
        list($response) = $this->listDeliveryPositionCloseWithHttpInfo($settle, $contract, $limit);
        return $response;
    }

    /**
     * Operation listDeliveryPositionCloseWithHttpInfo
     *
     * List position close history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\PositionClose[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryPositionCloseWithHttpInfo($settle, $contract = null, $limit = 100)
    {
        $request = $this->listDeliveryPositionCloseRequest($settle, $contract, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\PositionClose[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\PositionClose[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\PositionClose[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\PositionClose[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryPositionCloseAsync
     *
     * List position close history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryPositionCloseAsync($settle, $contract = null, $limit = 100)
    {
        return $this->listDeliveryPositionCloseAsyncWithHttpInfo($settle, $contract, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryPositionCloseAsyncWithHttpInfo
     *
     * List position close history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryPositionCloseAsyncWithHttpInfo($settle, $contract = null, $limit = 100)
    {
        $returnType = '\GateApi\Model\PositionClose[]';
        $request = $this->listDeliveryPositionCloseRequest($settle, $contract, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryPositionClose'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryPositionCloseRequest($settle, $contract = null, $limit = 100)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryPositionClose'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryPositionClose, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryPositionClose, must be bigger than or equal to 1.');
        }


        $resourcePath = '/delivery/{settle}/position_close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryPositions
     *
     * List all positions of a user
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\Position[]
     */
    public function listDeliveryPositions($settle)
    {
        list($response) = $this->listDeliveryPositionsWithHttpInfo($settle);
        return $response;
    }

    /**
     * Operation listDeliveryPositionsWithHttpInfo
     *
     * List all positions of a user
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\Position[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryPositionsWithHttpInfo($settle)
    {
        $request = $this->listDeliveryPositionsRequest($settle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\Position[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\Position[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\Position[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\Position[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryPositionsAsync
     *
     * List all positions of a user
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryPositionsAsync($settle)
    {
        return $this->listDeliveryPositionsAsyncWithHttpInfo($settle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryPositionsAsyncWithHttpInfo
     *
     * List all positions of a user
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryPositionsAsyncWithHttpInfo($settle)
    {
        $returnType = '\GateApi\Model\Position[]';
        $request = $this->listDeliveryPositionsRequest($settle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryPositions'
     *
     * @param  string $settle Settle currency (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryPositionsRequest($settle)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryPositions'
            );
        }

        $resourcePath = '/delivery/{settle}/positions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliverySettlements
     *
     * List settlement history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a settlement timestamp (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\DeliverySettlement[]
     */
    public function listDeliverySettlements($settle, $contract = null, $limit = 100, $at = 0)
    {
        list($response) = $this->listDeliverySettlementsWithHttpInfo($settle, $contract, $limit, $at);
        return $response;
    }

    /**
     * Operation listDeliverySettlementsWithHttpInfo
     *
     * List settlement history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a settlement timestamp (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\DeliverySettlement[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliverySettlementsWithHttpInfo($settle, $contract = null, $limit = 100, $at = 0)
    {
        $request = $this->listDeliverySettlementsRequest($settle, $contract, $limit, $at);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\DeliverySettlement[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\DeliverySettlement[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\DeliverySettlement[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\DeliverySettlement[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliverySettlementsAsync
     *
     * List settlement history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a settlement timestamp (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliverySettlementsAsync($settle, $contract = null, $limit = 100, $at = 0)
    {
        return $this->listDeliverySettlementsAsyncWithHttpInfo($settle, $contract, $limit, $at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliverySettlementsAsyncWithHttpInfo
     *
     * List settlement history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a settlement timestamp (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliverySettlementsAsyncWithHttpInfo($settle, $contract = null, $limit = 100, $at = 0)
    {
        $returnType = '\GateApi\Model\DeliverySettlement[]';
        $request = $this->listDeliverySettlementsRequest($settle, $contract, $limit, $at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliverySettlements'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $at Specify a settlement timestamp (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliverySettlementsRequest($settle, $contract = null, $limit = 100, $at = 0)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliverySettlements'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliverySettlements, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliverySettlements, must be bigger than or equal to 1.');
        }


        $resourcePath = '/delivery/{settle}/settlements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($at !== null) {
            $queryParams['at'] = ObjectSerializer::toQueryValue($at);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryTickers
     *
     * List futures tickers
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesTicker[]
     */
    public function listDeliveryTickers($settle, $contract = null)
    {
        list($response) = $this->listDeliveryTickersWithHttpInfo($settle, $contract);
        return $response;
    }

    /**
     * Operation listDeliveryTickersWithHttpInfo
     *
     * List futures tickers
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesTicker[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryTickersWithHttpInfo($settle, $contract = null)
    {
        $request = $this->listDeliveryTickersRequest($settle, $contract);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesTicker[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesTicker[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesTicker[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesTicker[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryTickersAsync
     *
     * List futures tickers
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryTickersAsync($settle, $contract = null)
    {
        return $this->listDeliveryTickersAsyncWithHttpInfo($settle, $contract)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryTickersAsyncWithHttpInfo
     *
     * List futures tickers
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryTickersAsyncWithHttpInfo($settle, $contract = null)
    {
        $returnType = '\GateApi\Model\FuturesTicker[]';
        $request = $this->listDeliveryTickersRequest($settle, $contract);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryTickers'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryTickersRequest($settle, $contract = null)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryTickers'
            );
        }

        $resourcePath = '/delivery/{settle}/tickers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryTrades
     *
     * Futures trading history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  string $last_id Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param  float $from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned. (optional)
     * @param  float $to Specify end time in Unix seconds, default to current time (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesTrade[]
     */
    public function listDeliveryTrades($settle, $contract, $limit = 100, $last_id = null, $from = null, $to = null)
    {
        list($response) = $this->listDeliveryTradesWithHttpInfo($settle, $contract, $limit, $last_id, $from, $to);
        return $response;
    }

    /**
     * Operation listDeliveryTradesWithHttpInfo
     *
     * Futures trading history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  string $last_id Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param  float $from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned. (optional)
     * @param  float $to Specify end time in Unix seconds, default to current time (optional)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesTrade[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryTradesWithHttpInfo($settle, $contract, $limit = 100, $last_id = null, $from = null, $to = null)
    {
        $request = $this->listDeliveryTradesRequest($settle, $contract, $limit, $last_id, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesTrade[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesTrade[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesTrade[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesTrade[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryTradesAsync
     *
     * Futures trading history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  string $last_id Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param  float $from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned. (optional)
     * @param  float $to Specify end time in Unix seconds, default to current time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryTradesAsync($settle, $contract, $limit = 100, $last_id = null, $from = null, $to = null)
    {
        return $this->listDeliveryTradesAsyncWithHttpInfo($settle, $contract, $limit, $last_id, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryTradesAsyncWithHttpInfo
     *
     * Futures trading history
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  string $last_id Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param  float $from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned. (optional)
     * @param  float $to Specify end time in Unix seconds, default to current time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryTradesAsyncWithHttpInfo($settle, $contract, $limit = 100, $last_id = null, $from = null, $to = null)
    {
        $returnType = '\GateApi\Model\FuturesTrade[]';
        $request = $this->listDeliveryTradesRequest($settle, $contract, $limit, $last_id, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryTrades'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  string $last_id Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param  float $from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned. (optional)
     * @param  float $to Specify end time in Unix seconds, default to current time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryTradesRequest($settle, $contract, $limit = 100, $last_id = null, $from = null, $to = null)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listDeliveryTrades'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling listDeliveryTrades'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryTrades, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listDeliveryTrades, must be bigger than or equal to 1.');
        }


        $resourcePath = '/delivery/{settle}/trades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($last_id !== null) {
            $queryParams['last_id'] = ObjectSerializer::toQueryValue($last_id);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPriceTriggeredDeliveryOrders
     *
     * List all auto orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\FuturesPriceTriggeredOrder[]
     */
    public function listPriceTriggeredDeliveryOrders($settle, $status, $contract = null, $limit = 100, $offset = 0)
    {
        list($response) = $this->listPriceTriggeredDeliveryOrdersWithHttpInfo($settle, $status, $contract, $limit, $offset);
        return $response;
    }

    /**
     * Operation listPriceTriggeredDeliveryOrdersWithHttpInfo
     *
     * List all auto orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\FuturesPriceTriggeredOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listPriceTriggeredDeliveryOrdersWithHttpInfo($settle, $status, $contract = null, $limit = 100, $offset = 0)
    {
        $request = $this->listPriceTriggeredDeliveryOrdersRequest($settle, $status, $contract, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\FuturesPriceTriggeredOrder[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\FuturesPriceTriggeredOrder[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\FuturesPriceTriggeredOrder[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\FuturesPriceTriggeredOrder[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPriceTriggeredDeliveryOrdersAsync
     *
     * List all auto orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPriceTriggeredDeliveryOrdersAsync($settle, $status, $contract = null, $limit = 100, $offset = 0)
    {
        return $this->listPriceTriggeredDeliveryOrdersAsyncWithHttpInfo($settle, $status, $contract, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPriceTriggeredDeliveryOrdersAsyncWithHttpInfo
     *
     * List all auto orders
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPriceTriggeredDeliveryOrdersAsyncWithHttpInfo($settle, $status, $contract = null, $limit = 100, $offset = 0)
    {
        $returnType = '\GateApi\Model\FuturesPriceTriggeredOrder[]';
        $request = $this->listPriceTriggeredDeliveryOrdersRequest($settle, $status, $contract, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPriceTriggeredDeliveryOrders'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $status List orders based on status (required)
     * @param  string $contract Futures contract, return related data only if specified (optional)
     * @param  int $limit Maximum number of records returned in one list (optional, default to 100)
     * @param  int $offset List offset, starting from 0 (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPriceTriggeredDeliveryOrdersRequest($settle, $status, $contract = null, $limit = 100, $offset = 0)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling listPriceTriggeredDeliveryOrders'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling listPriceTriggeredDeliveryOrders'
            );
        }
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listPriceTriggeredDeliveryOrders, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DeliveryApi.listPriceTriggeredDeliveryOrders, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DeliveryApi.listPriceTriggeredDeliveryOrders, must be bigger than or equal to 0.');
        }


        $resourcePath = '/delivery/{settle}/price_orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('GET', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeliveryPositionLeverage
     *
     * Update position leverage
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $leverage New position leverage (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\Position
     */
    public function updateDeliveryPositionLeverage($settle, $contract, $leverage)
    {
        list($response) = $this->updateDeliveryPositionLeverageWithHttpInfo($settle, $contract, $leverage);
        return $response;
    }

    /**
     * Operation updateDeliveryPositionLeverageWithHttpInfo
     *
     * Update position leverage
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $leverage New position leverage (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\Position, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeliveryPositionLeverageWithHttpInfo($settle, $contract, $leverage)
    {
        $request = $this->updateDeliveryPositionLeverageRequest($settle, $contract, $leverage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\Position' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\Position', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\Position';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\Position',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeliveryPositionLeverageAsync
     *
     * Update position leverage
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $leverage New position leverage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeliveryPositionLeverageAsync($settle, $contract, $leverage)
    {
        return $this->updateDeliveryPositionLeverageAsyncWithHttpInfo($settle, $contract, $leverage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeliveryPositionLeverageAsyncWithHttpInfo
     *
     * Update position leverage
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $leverage New position leverage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeliveryPositionLeverageAsyncWithHttpInfo($settle, $contract, $leverage)
    {
        $returnType = '\GateApi\Model\Position';
        $request = $this->updateDeliveryPositionLeverageRequest($settle, $contract, $leverage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeliveryPositionLeverage'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $leverage New position leverage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDeliveryPositionLeverageRequest($settle, $contract, $leverage)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling updateDeliveryPositionLeverage'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling updateDeliveryPositionLeverage'
            );
        }
        // verify the required parameter 'leverage' is set
        if ($leverage === null || (is_array($leverage) && count($leverage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leverage when calling updateDeliveryPositionLeverage'
            );
        }

        $resourcePath = '/delivery/{settle}/positions/{contract}/leverage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($leverage !== null) {
            $queryParams['leverage'] = ObjectSerializer::toQueryValue($leverage);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($contract !== null) {
            $resourcePath = str_replace(
                '{' . 'contract' . '}',
                ObjectSerializer::toPathValue($contract),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('POST', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeliveryPositionMargin
     *
     * Update position margin
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\Position
     */
    public function updateDeliveryPositionMargin($settle, $contract, $change)
    {
        list($response) = $this->updateDeliveryPositionMarginWithHttpInfo($settle, $contract, $change);
        return $response;
    }

    /**
     * Operation updateDeliveryPositionMarginWithHttpInfo
     *
     * Update position margin
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\Position, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeliveryPositionMarginWithHttpInfo($settle, $contract, $change)
    {
        $request = $this->updateDeliveryPositionMarginRequest($settle, $contract, $change);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\Position' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\Position', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\Position';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\Position',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeliveryPositionMarginAsync
     *
     * Update position margin
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeliveryPositionMarginAsync($settle, $contract, $change)
    {
        return $this->updateDeliveryPositionMarginAsyncWithHttpInfo($settle, $contract, $change)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeliveryPositionMarginAsyncWithHttpInfo
     *
     * Update position margin
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeliveryPositionMarginAsyncWithHttpInfo($settle, $contract, $change)
    {
        $returnType = '\GateApi\Model\Position';
        $request = $this->updateDeliveryPositionMarginRequest($settle, $contract, $change);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeliveryPositionMargin'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDeliveryPositionMarginRequest($settle, $contract, $change)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling updateDeliveryPositionMargin'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling updateDeliveryPositionMargin'
            );
        }
        // verify the required parameter 'change' is set
        if ($change === null || (is_array($change) && count($change) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change when calling updateDeliveryPositionMargin'
            );
        }

        $resourcePath = '/delivery/{settle}/positions/{contract}/margin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($change !== null) {
            $queryParams['change'] = ObjectSerializer::toQueryValue($change);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($contract !== null) {
            $resourcePath = str_replace(
                '{' . 'contract' . '}',
                ObjectSerializer::toPathValue($contract),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('POST', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeliveryPositionRiskLimit
     *
     * Update position risk limit
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $risk_limit New position risk limit (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \GateApi\Model\Position
     */
    public function updateDeliveryPositionRiskLimit($settle, $contract, $risk_limit)
    {
        list($response) = $this->updateDeliveryPositionRiskLimitWithHttpInfo($settle, $contract, $risk_limit);
        return $response;
    }

    /**
     * Operation updateDeliveryPositionRiskLimitWithHttpInfo
     *
     * Update position risk limit
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $risk_limit New position risk limit (required)
     *
     * @throws \GateApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \GateApi\Model\Position, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeliveryPositionRiskLimitWithHttpInfo($settle, $contract, $risk_limit)
    {
        $request = $this->updateDeliveryPositionRiskLimitRequest($settle, $contract, $risk_limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\GateApi\Model\Position' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GateApi\Model\Position', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GateApi\Model\Position';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GateApi\Model\Position',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeliveryPositionRiskLimitAsync
     *
     * Update position risk limit
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $risk_limit New position risk limit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeliveryPositionRiskLimitAsync($settle, $contract, $risk_limit)
    {
        return $this->updateDeliveryPositionRiskLimitAsyncWithHttpInfo($settle, $contract, $risk_limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeliveryPositionRiskLimitAsyncWithHttpInfo
     *
     * Update position risk limit
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $risk_limit New position risk limit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeliveryPositionRiskLimitAsyncWithHttpInfo($settle, $contract, $risk_limit)
    {
        $returnType = '\GateApi\Model\Position';
        $request = $this->updateDeliveryPositionRiskLimitRequest($settle, $contract, $risk_limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeliveryPositionRiskLimit'
     *
     * @param  string $settle Settle currency (required)
     * @param  string $contract Futures contract (required)
     * @param  string $risk_limit New position risk limit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDeliveryPositionRiskLimitRequest($settle, $contract, $risk_limit)
    {
        // verify the required parameter 'settle' is set
        if ($settle === null || (is_array($settle) && count($settle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settle when calling updateDeliveryPositionRiskLimit'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling updateDeliveryPositionRiskLimit'
            );
        }
        // verify the required parameter 'risk_limit' is set
        if ($risk_limit === null || (is_array($risk_limit) && count($risk_limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $risk_limit when calling updateDeliveryPositionRiskLimit'
            );
        }

        $resourcePath = '/delivery/{settle}/positions/{contract}/risk_limit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($risk_limit !== null) {
            $queryParams['risk_limit'] = ObjectSerializer::toQueryValue($risk_limit);
        }

        // path params
        if ($settle !== null) {
            $resourcePath = str_replace(
                '{' . 'settle' . '}',
                ObjectSerializer::toPathValue($settle),
                $resourcePath
            );
        }
        // path params
        if ($contract !== null) {
            $resourcePath = str_replace(
                '{' . 'contract' . '}',
                ObjectSerializer::toPathValue($contract),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $signHeaders = $this->buildSignHeaders('POST', $resourcePath, $query, $httpBody);
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $signHeaders,
            $headers
        );

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
